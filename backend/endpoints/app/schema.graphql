schema {
    query: Query
    mutation: Mutation
}

type Project {
    uuid: ID!
    name: String!
    description: String
}

type Repository {
    uuid: ID!
    url: String!
    name: String!
    description: String
}

type ProjectResult {
    success: Boolean!
    errors: [String]
    project: Project
}

type ProjectsResult {
    success: Boolean!
    errors: [String]
    projects: [Project]
}

type DeleteProjectResult {
    success: Boolean!
    errors: [String]
}

type RepositoryResult {
    success: Boolean!
    errors: [String]
    repository: Repository
}

type DeleteRepositoryResult {
    success: Boolean!
    errors: [String]
}

type RepositoryTemplateResult {
    success: Boolean!
    errors: [String]
}

type Organisation {
    uuid: ID!
    name: String!
    owner: String!
    description: String
}

type Query {
    projects: ProjectsResult!
    projectsByOrg(organisationUuid: ID!): ProjectsResult!
    projectsByUser(userUuid: ID!): ProjectsResult!
    project(projectUuid: ID!): ProjectResult!
    projectByOrg(organisationUuid: ID!, projectUuid: ID!): ProjectResult!
    projectByUser(userUuid: ID!, projectUuid: ID!): ProjectResult!
    repository(repositoryUuid: ID!): RepositoryResult!
}

type Mutation {
    createProject(name: String!, description: String): ProjectResult!
    updateDescription(projectUuid: ID!, description: String!): ProjectResult!
    deleteProject(projectUuid: ID!): DeleteProjectResult!
    createRepository(url: String!, name: String!, description: String): RepositoryResult!
    deleteRepository(repositoryUuid: ID!): DeleteRepositoryResult!
    deleteAllFilesFromRepository(repo_name: String!, repo_url: String!, branch: String): RepositoryTemplateResult!
    pushRepositoryTemplate(repo_url: String!, template: String!, branch: String): RepositoryTemplateResult!
}