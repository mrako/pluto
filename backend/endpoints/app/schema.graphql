schema {
    query: Query
    mutation: Mutation
}

type Project {
    uuid: ID!
    name: String!
    description: String
}

type Organisation {
    uuid: ID!
    dataOrigin: String!
    externalId: String!
    name: String!
    installationId: String!
}

type User {
    uuid: ID!
    username: String!
    email: String!
    name: String
}

type ProjectUser {
    uuid: ID!
    dataOrigin: String!
    externalId: String!
    username: String!
    installationId: String!
    email: String
}

type ProjectResult {
    success: Boolean!
    errors: [String]
    project: Project
}

type ProjectsResult {
    success: Boolean!
    errors: [String]
    projects: [Project]
}

type DeleteProjectResult {
    success: Boolean!
    errors: [String]
}

type BindUserResult {
    success: Boolean!
    errors: [String]
    userAccount: User
    projectUser: ProjectUser
    organisation: Organisation
}

type Query {
    projects: ProjectsResult!
    projectsByOrg(organisationUuid: ID!): ProjectsResult!
    projectsByUser(userUuid: ID!): ProjectsResult!
    project(projectUuid: ID!): ProjectResult!
    projectByOrg(organisationUuid: ID!, projectUuid: ID!): ProjectResult!
    projectByUser(userUuid: ID!, projectUuid: ID!): ProjectResult!
}

type Mutation {
    createProject(name: String!, description: String): ProjectResult!
    updateDescription(projectUuid: ID!, description: String!): ProjectResult!
    deleteProject(projectUuid: ID!): DeleteProjectResult!
    bindPlutoUser(installationId: ID!, plutoUserUUID: ID!): BindUserResult
}